name: CI/CD Pipeline for Spring Boot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      MAVEN_CACHE_DIR: ~/.m2/repository

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.MAVEN_CACHE_DIR }}
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    # Step 3: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    # Step 4: Install dependencies
    - name: Install dependencies
      run: mvn clean install --no-transfer-progress

    # Step 5: Run tests
    - name: Run tests
      run: mvn test --no-transfer-progress

    # Step 6: Package application
    - name: Package application
      run: mvn package --no-transfer-progress

    # Step 7: Add SSH key to known hosts
    - name: Add SSH key to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DO_SSH_HOST }} >> ~/.ssh/known_hosts
        chmod 700 ~/.ssh
        chmod 644 ~/.ssh/known_hosts
    # Step 8: Deploy to DigitalOcean
    - name: Deploy to DigitalOcean
      env:
        DO_SSH_HOST: ${{ secrets.DO_SSH_HOST }}
        DO_SSH_USER: ${{ secrets.DO_SSH_USER }}
        DO_SSH_KEY: ${{ secrets.DO_SSH_KEY }}
        DO_APP_DIR: ${{ secrets.DO_APP_DIR }}
        SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}  # Add passphrase as a secret if needed
      run: |
        # Save SSH private key to a file
        echo "$DO_SSH_KEY" > private_key
        chmod 600 private_key
        # Start ssh-agent and add the private key with passphrase
        eval $(ssh-agent -s)
        echo "$SSH_PASSPHRASE" | ssh-add <(echo "$DO_SSH_KEY")
        # Copy the JAR to the server
        scp -o StrictHostKeyChecking=no -i private_key target/*.jar $DO_SSH_USER@$DO_SSH_HOST:$DO_APP_DIR/app.jar
        # Restart the application
        ssh -o StrictHostKeyChecking=no -i private_key $DO_SSH_USER@$DO_SSH_HOST << EOF
        pkill -f 'java -jar' || true
        nohup java -jar $DO_APP_DIR/app.jar > $DO_APP_DIR/app.log 2>&1 &
        EOF
        # Clean up private key
        rm private_key
    # Step 9: Notification on failure
    - name: Notify on failure
      if: failure()
      run: echo "Build or deployment failed. Check logs for details."
